
trigger:
- master

stages:

- stage: Build
  jobs:

  - job: Build
    pool:
      vmImage: 'macOS-10.14'
    steps:
    - checkout: self
      clean: true
      persistCredentials: true
    - script: dotnet tool install --global GitVersion.Tool --version 5.3.3
      displayName: Install Gitversion
    - pwsh: |
        $raw = dotnet-gitversion
        Write-Host $raw
        $version = $raw | ConvertFrom-Json | ForEach-Object MajorMinorPatch
        Write-Host "##vso[build.updatebuildnumber]$version"
      displayName: Set Build Number
    - pwsh: |
        $rawManifest = Get-Content -Path "PwshTenable.psd1" -raw
        $updatedManifest = $rawManifest -replace "ModuleVersion\s*=\s*['`"][0-9.]+['`"]", "ModuleVersion = '$(Build.BuildNumber)'"
        $updatedManifest | Out-File -Path "PwshTenable.psd1" -NoNewline
      displayName: Update Module Manifest Version Number
    - task: CopyFiles@2
      inputs:
        contents: |
          **/*
          !**/.*/**/*
          !**/.*
          !azure-pipelines.yml
          !gitversion.yml
        targetFolder: $(Build.ArtifactStagingDirectory)/PwshTenable
    - publish: '$(Build.ArtifactStagingDirectory)/PwshTenable'
      artifact: 'files'
      displayName: 'Publish Artifact files'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.ArtifactStagingDirectory)/PwshTenable
        archiveFile: '$(Build.ArtifactStagingDirectory)/PwshTenable_$(Build.BuildNumber).zip'
      displayName: 'Archive zip'
    - publish: '$(Build.ArtifactStagingDirectory)/PwshTenable_$(Build.BuildNumber).zip'
      artifact: 'zip'
      displayName: 'Publish Artifact zip'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.ArtifactStagingDirectory)/PwshTenable
        archiveType: tar
        archiveFile: '$(Build.ArtifactStagingDirectory)/PwshTenable_$(Build.BuildNumber).tar.gz'
      displayName: 'Archive tar'
    - publish: '$(Build.ArtifactStagingDirectory)/PwshTenable_$(Build.BuildNumber).tar.gz'
      artifact: 'tar'
      displayName: 'Publish Artifact tar'

- stage: Test
  jobs:

  - job: Mac_10_14
    pool:
      vmImage: 'macOS-10.14'
    steps:
    - checkout: none
    - download: current
      artifact: files
    - pwsh: $PSVersionTable | Out-String
      displayName: PSVersionTable
    - pwsh: |
        Save-Module -Name PSScriptAnalyzer -Path '.' -Repository PSGallery -Confirm:$false
        Import-Module -Name './PSScriptAnalyzer/'
        Get-ChildItem -Path '$(Pipeline.Workspace)' -Directory | Invoke-ScriptAnalyzer -EnableExit | Format-Table -AutoSize
      displayName: Script Analyzer
    - pwsh: |
        Save-Module -Name Pester -Path '.' -MaximumVersion 4.999.999 -Repository PSGallery -Confirm:$false
        Import-Module -Name './Pester/'
        Set-Location -Path '$(Pipeline.Workspace)'
        Invoke-Pester -EnableExit -OutputFile "$(System.DefaultWorkingDirectory)/Test-Pester-Mac.xml" -OutputFormat NUnitXML
      displayName: Pester
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: 'Test-Pester-Mac.xml'
        searchFolder: $(System.DefaultWorkingDirectory)
        mergeTestResults: true
        buildPlatform: Mac 10.14

  - job: Ubuntu_18_04
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - checkout: none
    - download: current
      artifact: files
    - pwsh: $PSVersionTable | Out-String
      displayName: PSVersionTable
    - pwsh: |
        Save-Module -Name PSScriptAnalyzer -Path '.' -Repository PSGallery -Confirm:$false
        Import-Module -Name './PSScriptAnalyzer/'
        Get-ChildItem -Path '$(Pipeline.Workspace)' -Directory | Invoke-ScriptAnalyzer -EnableExit | Format-Table -AutoSize
      displayName: Script Analyzer
    - pwsh: |
        Save-Module -Name Pester -Path '.' -MaximumVersion 4.999.999 -Repository PSGallery -Confirm:$false
        Import-Module -Name './Pester/'
        Set-Location -Path '$(Pipeline.Workspace)'
        Invoke-Pester -EnableExit -OutputFile "$(System.DefaultWorkingDirectory)/Test-Pester-Ubuntu.xml" -OutputFormat NUnitXML
      displayName: Pester
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: 'Test-Pester-Ubuntu.xml'
        searchFolder: $(System.DefaultWorkingDirectory)
        mergeTestResults: true
        buildPlatform: Ubuntu 18.04

  - job: Windows_2019_Pwsh
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: none
    - download: current
      artifact: files
    - pwsh: $PSVersionTable | Out-String
      displayName: PSVersionTable
    - pwsh: |
        Save-Module -Name PSScriptAnalyzer -Path '.' -Repository PSGallery -Confirm:$false
        Import-Module -Name './PSScriptAnalyzer/'
        Get-ChildItem -Path '$(Pipeline.Workspace)' -Directory | Invoke-ScriptAnalyzer -EnableExit | Format-Table -AutoSize
      displayName: Script Analyzer
    - pwsh: |
        Save-Module -Name Pester -Path '.' -MaximumVersion 4.999.999 -Repository PSGallery -Confirm:$false
        Import-Module -Name './Pester/'
        Set-Location -Path '$(Pipeline.Workspace)'
        Invoke-Pester -EnableExit -OutputFile "$(System.DefaultWorkingDirectory)/Test-Pester-Win2019.xml" -OutputFormat NUnitXML
      displayName: Pester
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: 'Test-Pester-Win2019.xml'
        searchFolder: $(System.DefaultWorkingDirectory)
        mergeTestResults: true
        buildPlatform: Windows Server 2019

  - job: Windows_2016_Powershell
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - checkout: none
    - download: current
      artifact: files
    - powershell: $PSVersionTable | Out-String
      displayName: PSVersionTable
    - powershell: |
        Save-Module -Name PSScriptAnalyzer -Path '.' -Repository PSGallery -Confirm:$false
        Resolve-Path -Path './PSScriptAnalyzer/*/PSScriptAnalyzer.psd1' | Import-Module
        Get-ChildItem -Path '$(Pipeline.Workspace)' -Directory | Invoke-ScriptAnalyzer -EnableExit | Format-Table -AutoSize
      displayName: Script Analyzer
    - powershell: |
        Save-Module -Name Pester -Path '.' -MaximumVersion 4.999.999 -Repository PSGallery -Confirm:$false
        Resolve-Path -Path './Pester/*/Pester.psd1' | Import-Module
        Set-Location -Path '$(Pipeline.Workspace)'
        Invoke-Pester -EnableExit -OutputFile "$(System.DefaultWorkingDirectory)/Test-Pester-Win2016.xml" -OutputFormat NUnitXML
      displayName: Pester
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: 'Test-Pester-Win2016.xml'
        searchFolder: $(System.DefaultWorkingDirectory)
        mergeTestResults: true
        buildPlatform: Windows Server 2016

- stage: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:

  - job: Commit_Updated_Manifest
    pool:
      vmImage: 'macOS-10.14'
    steps:
    - checkout: self
      clean: true
      persistCredentials: true
    - download: current
      artifact: files
    - pwsh: |
        Move-Item -Path '$(Pipeline.Workspace)/files/PwshTenable.psd1' -Destination 'PwshTenable.psd1' -Confirm:$false -Force
        git add PwshTenable.psd1
        git -c "user.name=$(Build.RequestedFor)" -c "user.email=$(Build.RequestedForEmail)" commit -m "Updated module version: $(Build.BuildNumber) [skip ci]"
        git push origin HEAD:master
      workingDirectory: '$(Build.SourcesDirectory)'

  - job: Github_Release
    dependsOn: Commit_Updated_Manifest
    steps:
    - task: GithubRelease@0
      displayName: 'Create GitHub Release'
      inputs:
        target: master
        gitHubConnection: RobFaie
        repositoryName: telstrapurple/PwshTenable
        tagSource: manual
        tag: $(Build.BuildNumber)
        assets: |
          $(Pipeline.Workspace)/zip/*.zip
          $(Pipeline.Workspace)/tar/*.tar
